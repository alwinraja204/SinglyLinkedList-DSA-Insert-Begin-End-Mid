class Node{
    int data ;
    Node next;
    
    Node(int data){
        this.data=data;
        this.next=null;
    }}
 class SinglyLinkedList{
    Node head;
    //Insert at begin
    public void InsertAtBegin(int data){
        Node newNode =new Node(data);
        newNode.next =head;
        head=newNode;
    }
    //Insert at end
    public void InsertAtEnd(int data){
        Node newNode = new Node(data);
        if(head==null){
            head=newNode;
        return;
        }
        Node temp=head;
        while(temp.next!=null){
            temp=temp.next;
        }
        temp.next=newNode;
    }
    //delete at begin
   public void DeleteAtBegin()
   {
       if(head==null){
           System.out.println("No need to delete");
           return;
       }
       head=head.next;
   }
  // delete at end
    public void DeleteAtEnd()
    {
      if(head==null){
          System.out.println("list is empty,no need to delete");
          return;
      }
      if(head.next==null){
      head=null;
     return;
       }
       Node temp=head;
       while(temp.next!=null &&temp.next.next!=null){
           temp=temp.next;
       }
        temp.next=null;
    }
    //insert at any position
      public void InsertAtAnyPosition(int position,int data){
        if(position<=0){
            System.out.println("Invalid position");
            return;
        }
        Node newNode=new Node(data);
        if(position==1){
            newNode.next=head;
            head=newNode;
            return;
        }
        Node temp=head;
        for(int i=0;i<position-1 && temp!=null;i++){
            temp=temp.next;
        }
        if(temp==null){
            System.out.println("Exceeds the given length");
            return;
        }
        newNode.next=temp.next;
        temp.next=newNode;
    }
    public void display(){
        Node temp=head;
        while(temp!=null){
            System.out.print(temp.data);
            if(temp.next!=null){
                System.out.print("->");
        }
            temp=temp.next;
        }
        System.out.println();
    }
}
    public class Main{
       public static void main(String[] args){
        SinglyLinkedList list = new SinglyLinkedList();
        list.InsertAtBegin(10);
        list.InsertAtBegin(20);
        list.InsertAtBegin(30);
        list.InsertAtBegin(40);
        list.display();
        list.InsertAtEnd(50);
        list.InsertAtEnd(70);
        list.display();
        list.DeleteAtBegin();
        list.display();
        list.DeleteAtEnd();
        list.display();
        list.InsertAtAnyPosition(3,150);
        list.display();
    }  
    }
